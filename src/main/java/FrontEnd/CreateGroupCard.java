/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrontEnd;

import BoardPackage.Board;
import CardsPackage.Card;
import CardsPackage.CardGoJail;
import CardsPackage.CardLostTurn;
import CardsPackage.CardMoveToSection;
import CardsPackage.CardOutJail;
import CardsPackage.CardPayToPlayers;
import CardsPackage.CardPenalty;
import CardsPackage.CardPersonalized;
import CardsPackage.CardPrize;
import CardsPackage.CardWalk;
import CardsPackage.GroupCards;
import SectionsPackage.Section;
import java.awt.Component;
import java.awt.Container;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author user-ubunto
 */
public class CreateGroupCard extends javax.swing.JFrame {
    private Card[] groupCards;
    private GroupCards groupCardsFinal;
    private int indexGroupCards;
    private int indexCardEdit;
    private Board board;
    /**
     * Creates new form CreateGroupCard
     */
    public CreateGroupCard(Board board) {
        initComponents();
        this.board = board;
        this.buttonGroup1.add(this.RadioButtonPenalty);
        this.buttonGroup1.add(this.RadioButtonPrize);
        this.buttonGroup1.add(this.RadioButtonNoQuantity);
        this.buttonGroup2.add(this.RadioButtonWalk);
        this.buttonGroup2.add(this.RadioButtonMoveSection);
        this.buttonGroup2.add(this.RadioButtonNoMove);
        this.groupCards = new Card[0];
        this.indexCardEdit = -1;
        this.indexGroupCards = -1;
        this.ButtonEdit.setEnabled(false);
        String option = (String)this.ComboBoxTypeCard.getSelectedItem();
        whoIsSelected(option);
        showSectionChange();
        showAllGroups();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        ComboBoxTypeCard = new javax.swing.JComboBox<>();
        ButtonAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListCards = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        TextFieldName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaDescription = new javax.swing.JTextArea();
        PanelStep = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        SpinnerWalk = new javax.swing.JSpinner();
        PanelQuantity = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        TextFieldQuantity = new javax.swing.JTextField();
        PanelSection = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        ComboBoxSectionChange = new javax.swing.JComboBox<>();
        ButtonCreateGroup = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        SpinnerNumberOfCopies = new javax.swing.JSpinner();
        PanelPersonalized = new javax.swing.JPanel();
        CheckBoxGoJail = new javax.swing.JCheckBox();
        PanelPay = new javax.swing.JPanel();
        RadioButtonPenalty = new javax.swing.JRadioButton();
        RadioButtonPrize = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        RadioButtonNoQuantity = new javax.swing.JRadioButton();
        PanelMove = new javax.swing.JPanel();
        RadioButtonWalk = new javax.swing.JRadioButton();
        RadioButtonMoveSection = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        RadioButtonNoMove = new javax.swing.JRadioButton();
        CheckBoxLostTurn = new javax.swing.JCheckBox();
        CheckBoxPaytoPlayers = new javax.swing.JCheckBox();
        PanelPayToPlayers = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        TextFieldPayToPlayers = new javax.swing.JTextField();
        PanelTurns = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        SpinnerLostTurn = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        ComboBoxGroups = new javax.swing.JComboBox<>();
        ButtonShowCard = new javax.swing.JButton();
        ButtonEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Tipo de Carta");

        ComboBoxTypeCard.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Caminar", "Premio", "Multa", "Pago a Jugadores", "Mover a Casilla", "Perder Turno", "Salga de la Carcel", "Vaya a la Carcel", "Personalizada" }));
        ComboBoxTypeCard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBoxTypeCardItemStateChanged(evt);
            }
        });

        ButtonAdd.setText("Agregar");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(ListCards);

        jLabel2.setText("Listado de Cartas");

        jLabel3.setText("Titulo de la Carta");

        jLabel4.setText("Descripcion");
        jLabel4.setToolTipText("");

        TextAreaDescription.setColumns(20);
        TextAreaDescription.setRows(5);
        jScrollPane2.setViewportView(TextAreaDescription);

        jLabel5.setText("Pasos a avanzar");

        javax.swing.GroupLayout PanelStepLayout = new javax.swing.GroupLayout(PanelStep);
        PanelStep.setLayout(PanelStepLayout);
        PanelStepLayout.setHorizontalGroup(
            PanelStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelStepLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SpinnerWalk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelStepLayout.setVerticalGroup(
            PanelStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelStepLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpinnerWalk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jLabel6.setText("Cantidad");

        javax.swing.GroupLayout PanelQuantityLayout = new javax.swing.GroupLayout(PanelQuantity);
        PanelQuantity.setLayout(PanelQuantityLayout);
        PanelQuantityLayout.setHorizontalGroup(
            PanelQuantityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelQuantityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelQuantityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(TextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelQuantityLayout.setVerticalGroup(
            PanelQuantityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelQuantityLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel8.setText("Casilla a Mover");

        javax.swing.GroupLayout PanelSectionLayout = new javax.swing.GroupLayout(PanelSection);
        PanelSection.setLayout(PanelSectionLayout);
        PanelSectionLayout.setHorizontalGroup(
            PanelSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(ComboBoxSectionChange, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        PanelSectionLayout.setVerticalGroup(
            PanelSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSectionLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComboBoxSectionChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        ButtonCreateGroup.setText("Crear Grupo ");
        ButtonCreateGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCreateGroupActionPerformed(evt);
            }
        });

        jLabel9.setText("Numero de copias");

        SpinnerNumberOfCopies.setValue(1);

        CheckBoxGoJail.setText("Ir a la Carcel");

        RadioButtonPenalty.setText("Multa");
        RadioButtonPenalty.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RadioButtonPenaltyItemStateChanged(evt);
            }
        });

        RadioButtonPrize.setText("Premio");
        RadioButtonPrize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonPrizeActionPerformed(evt);
            }
        });

        RadioButtonNoQuantity.setText("Sin Pago");
        RadioButtonNoQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonNoQuantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelPayLayout = new javax.swing.GroupLayout(PanelPay);
        PanelPay.setLayout(PanelPayLayout);
        PanelPayLayout.setHorizontalGroup(
            PanelPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(PanelPayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RadioButtonPenalty)
                    .addComponent(RadioButtonPrize)
                    .addComponent(RadioButtonNoQuantity))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        PanelPayLayout.setVerticalGroup(
            PanelPayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPayLayout.createSequentialGroup()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButtonPenalty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButtonPrize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RadioButtonNoQuantity))
        );

        RadioButtonWalk.setText("Caminar");
        RadioButtonWalk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonWalkActionPerformed(evt);
            }
        });

        RadioButtonMoveSection.setText("Mover a casilla");
        RadioButtonMoveSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonMoveSectionActionPerformed(evt);
            }
        });

        RadioButtonNoMove.setText("Sin Movimiento");
        RadioButtonNoMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonNoMoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelMoveLayout = new javax.swing.GroupLayout(PanelMove);
        PanelMove.setLayout(PanelMoveLayout);
        PanelMoveLayout.setHorizontalGroup(
            PanelMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMoveLayout.createSequentialGroup()
                .addGroup(PanelMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(PanelMoveLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RadioButtonWalk)
                            .addComponent(RadioButtonMoveSection)
                            .addComponent(RadioButtonNoMove))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelMoveLayout.setVerticalGroup(
            PanelMoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelMoveLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(RadioButtonWalk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButtonMoveSection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButtonNoMove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CheckBoxLostTurn.setText("Perder Turno");
        CheckBoxLostTurn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBoxLostTurnItemStateChanged(evt);
            }
        });

        CheckBoxPaytoPlayers.setText("Pago a Jugadores");
        CheckBoxPaytoPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxPaytoPlayersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelPersonalizedLayout = new javax.swing.GroupLayout(PanelPersonalized);
        PanelPersonalized.setLayout(PanelPersonalizedLayout);
        PanelPersonalizedLayout.setHorizontalGroup(
            PanelPersonalizedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPersonalizedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPersonalizedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckBoxGoJail)
                    .addComponent(CheckBoxLostTurn)
                    .addComponent(CheckBoxPaytoPlayers))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(PanelPersonalizedLayout.createSequentialGroup()
                .addGroup(PanelPersonalizedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PanelMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PanelPersonalizedLayout.setVerticalGroup(
            PanelPersonalizedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPersonalizedLayout.createSequentialGroup()
                .addComponent(CheckBoxGoJail)
                .addGap(8, 8, 8)
                .addComponent(CheckBoxLostTurn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckBoxPaytoPlayers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelPay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelMove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel10.setText("Cantidad de Pago");

        javax.swing.GroupLayout PanelPayToPlayersLayout = new javax.swing.GroupLayout(PanelPayToPlayers);
        PanelPayToPlayers.setLayout(PanelPayToPlayersLayout);
        PanelPayToPlayersLayout.setHorizontalGroup(
            PanelPayToPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPayToPlayersLayout.createSequentialGroup()
                .addGroup(PanelPayToPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextFieldPayToPlayers))
                .addGap(0, 1, Short.MAX_VALUE))
        );
        PanelPayToPlayersLayout.setVerticalGroup(
            PanelPayToPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPayToPlayersLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldPayToPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jLabel7.setText("Turnos a Perder");

        javax.swing.GroupLayout PanelTurnsLayout = new javax.swing.GroupLayout(PanelTurns);
        PanelTurns.setLayout(PanelTurnsLayout);
        PanelTurnsLayout.setHorizontalGroup(
            PanelTurnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTurnsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelTurnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(SpinnerLostTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelTurnsLayout.setVerticalGroup(
            PanelTurnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTurnsLayout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpinnerLostTurn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jLabel11.setText("Grupo de Cartas");

        ComboBoxGroups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxGroupsActionPerformed(evt);
            }
        });

        ButtonShowCard.setText("Mostrar Carta");
        ButtonShowCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonShowCardActionPerformed(evt);
            }
        });

        ButtonEdit.setText("Editar");
        ButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(TextFieldName)
                        .addComponent(jScrollPane2)
                        .addComponent(ComboBoxTypeCard, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(SpinnerNumberOfCopies, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ComboBoxGroups, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(ButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonShowCard)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ButtonCreateGroup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(PanelSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(PanelStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PanelTurns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(6, 6, 6)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PanelPayToPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PanelPersonalized, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(PanelPersonalized, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PanelTurns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PanelPayToPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PanelSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonCreateGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(3, 3, 3)
                                .addComponent(ComboBoxGroups, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ButtonShowCard)
                                    .addComponent(ButtonEdit))
                                .addGap(13, 13, 13)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ComboBoxTypeCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(SpinnerNumberOfCopies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(15, 15, 15)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBoxTypeCardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBoxTypeCardItemStateChanged
        String option = (String)this.ComboBoxTypeCard.getSelectedItem();
        whoIsSelected(option);
    }//GEN-LAST:event_ComboBoxTypeCardItemStateChanged

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        addCard();
        showCardsInGroup();
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void RadioButtonPenaltyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RadioButtonPenaltyItemStateChanged
        radioButtonSelected();
    }//GEN-LAST:event_RadioButtonPenaltyItemStateChanged

    private void RadioButtonPrizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonPrizeActionPerformed
        radioButtonSelected();
    }//GEN-LAST:event_RadioButtonPrizeActionPerformed

    private void RadioButtonNoQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonNoQuantityActionPerformed
        radioButtonSelected();
    }//GEN-LAST:event_RadioButtonNoQuantityActionPerformed

    private void RadioButtonWalkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonWalkActionPerformed
        radioButtonSelected();
    }//GEN-LAST:event_RadioButtonWalkActionPerformed

    private void RadioButtonMoveSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonMoveSectionActionPerformed
        radioButtonSelected();
    }//GEN-LAST:event_RadioButtonMoveSectionActionPerformed

    private void RadioButtonNoMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonNoMoveActionPerformed
        radioButtonSelected();
    }//GEN-LAST:event_RadioButtonNoMoveActionPerformed

    private void CheckBoxLostTurnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBoxLostTurnItemStateChanged
        String option = (String)this.ComboBoxTypeCard.getSelectedItem();
        if (this.CheckBoxLostTurn.isSelected() && option.equalsIgnoreCase("Personalizada")) {
            enableComponents(this.PanelTurns,true);
        }else{
            enableComponents(this.PanelTurns,false);
        }
    }//GEN-LAST:event_CheckBoxLostTurnItemStateChanged

    private void CheckBoxPaytoPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxPaytoPlayersActionPerformed
        String option = (String)this.ComboBoxTypeCard.getSelectedItem();
        if (this.CheckBoxPaytoPlayers.isSelected() && option.equalsIgnoreCase("Personalizada")) {
            enableComponents(this.PanelPayToPlayers,true);
        }else{
            enableComponents(this.PanelPayToPlayers,false);
        }
    }//GEN-LAST:event_CheckBoxPaytoPlayersActionPerformed

    private void ButtonCreateGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCreateGroupActionPerformed
        if (this.indexGroupCards == -1) {
            this.groupCardsFinal = new GroupCards(this.groupCards);
            this.board.setGroupsCards(this.groupCardsFinal);
        }else{
            this.groupCardsFinal = new GroupCards(this.groupCards);            
        }        
        this.dispose();
    }//GEN-LAST:event_ButtonCreateGroupActionPerformed

    private void ComboBoxGroupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxGroupsActionPerformed
        int option = this.ComboBoxGroups.getSelectedIndex();
        if (option != 0) {
            GroupCards[] groups = this.board.getGroupsCards();
            this.groupCardsFinal = groups[option-1];
            this.groupCards = this.groupCardsFinal.getGroupCards();
            this.indexGroupCards = option;
        }else{
            this.indexGroupCards = -1;
            this.groupCardsFinal = null;
            this.groupCards = new Card[0];
        }
        showCardsInGroup();
    }//GEN-LAST:event_ComboBoxGroupsActionPerformed

    private void ButtonShowCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonShowCardActionPerformed
        int indexCard = this.ListCards.getSelectedIndex();
        if (indexCard == -1) {
            JOptionPane.showMessageDialog(null, "Tienes que seleccionar una carta");
        }else{
            this.indexCardEdit = indexCard;
            showCardToEdit(this.groupCards[indexCard]);
            this.ButtonEdit.setEnabled(true);
        }                
    }//GEN-LAST:event_ButtonShowCardActionPerformed

    private void ButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditActionPerformed
        addCard();
        this.indexCardEdit = -1;
        this.ButtonEdit.setEnabled(false);
    }//GEN-LAST:event_ButtonEditActionPerformed
    
    /**
     * This method is used to enable by the
     * option who is selected in the combobox.
     * 
     * @param option
     */
    private void whoIsSelected(String option){        
        enableComponents(this.PanelQuantity,false);
        enableComponents(this.PanelSection,false);
        enableComponents(this.PanelStep,false);
        enableComponents(this.PanelTurns,false);
        enableComponents(this.PanelPersonalized,false);
        enableComponents(this.PanelPayToPlayers,false);
        if (option.equalsIgnoreCase("Caminar")) {
            enableComponents(this.PanelStep,true);
        }else if (option.equalsIgnoreCase("Multa") || option.equalsIgnoreCase("Premio")) {            
            enableComponents(this.PanelQuantity,true);
        }else if(option.equalsIgnoreCase("Pago a Jugadores")){
            enableComponents(this.PanelPayToPlayers,true);
        }else if (option.equalsIgnoreCase("Mover a Casilla")) {
            enableComponents(this.PanelSection,true);
        }else if (option.equalsIgnoreCase("Perder Turno")) {
            enableComponents(this.PanelTurns,true);
        }else if (option.equalsIgnoreCase("Personalizada")) {
            enableComponents(this.PanelPersonalized,true);
            this.RadioButtonNoMove.setSelected(true);
            this.RadioButtonNoQuantity.setSelected(true);
        }
    }
    
    /**
     * This method is used to show the card
     * who is goig to edit.
     * 
     */
    private void showCardToEdit(Card cardEdit){ 
        this.TextFieldName.setText(cardEdit.getName());
        this.TextAreaDescription.setText(cardEdit.getDescription());
        if (cardEdit instanceof CardGoJail) {
            this.ComboBoxTypeCard.setSelectedItem("Vaya a la Carcel");            
        }else if (cardEdit instanceof CardLostTurn) {
            this.ComboBoxTypeCard.setSelectedItem("Perder Turno");
            this.SpinnerLostTurn.setValue(((CardLostTurn) cardEdit).getQuantityTurns());
        }else if (cardEdit instanceof CardMoveToSection) {
            this.ComboBoxTypeCard.setSelectedItem("Mover a Casilla");           
        }else if (cardEdit instanceof CardOutJail) {
            this.ComboBoxTypeCard.setSelectedItem("Salga de la Carcel");
        }else if (cardEdit instanceof CardPayToPlayers) {
            this.ComboBoxTypeCard.setSelectedItem("Pago a Jugadores");
            this.TextFieldPayToPlayers.setText(String.valueOf(((CardPayToPlayers) cardEdit).getQuantityToPay()));            
        }else if (cardEdit instanceof CardPenalty) {
            this.ComboBoxTypeCard.setSelectedItem("Multa");
            this.TextFieldQuantity.setText(String.valueOf(((CardPenalty) cardEdit).getQuantityToPay()));
        }else if (cardEdit instanceof CardPersonalized) {
            this.ComboBoxTypeCard.setSelectedItem("Personalizada");
        }else if (cardEdit instanceof CardPrize) {
            this.ComboBoxTypeCard.setSelectedItem("Premio");
            this.TextFieldQuantity.setText(String.valueOf(((CardPrize) cardEdit).getQuantityPrize()));
        }else if (cardEdit instanceof CardWalk) {
            this.ComboBoxTypeCard.setSelectedItem("Caminar");
            this.SpinnerWalk.setValue(((CardWalk) cardEdit).getQuantitySteps());
        }                
    }
    /**
     * This method is used to show 
     * all the groups of cards that are
     * created.
     * 
     */
    private void showAllGroups(){
        this.ComboBoxGroups.addItem(" ");
        GroupCards[] groups = this.board.getGroupsCards();
        for (int i = 0; i < groups.length; i++) {
            this.ComboBoxGroups.addItem("Grupo No." + (i+1));            
        }
    }
    
    /**
     * This method is used to review and set
     * enable the containers by the radiobuttons
     * of the personalized card.
     * 
     */
    private void radioButtonSelected(){
        String option = (String)this.ComboBoxTypeCard.getSelectedItem();
        if (option.equalsIgnoreCase("Personalizada")) {
            if (this.RadioButtonPenalty.isSelected() || this.RadioButtonPrize.isSelected()) {            
                enableComponents(this.PanelQuantity,true);
            }else if(this.RadioButtonNoQuantity.isSelected()){
                enableComponents(this.PanelQuantity,false);
            }
            
            if (this.RadioButtonWalk.isSelected()) {            
                enableComponents(this.PanelStep,true);
                enableComponents(this.PanelSection,false);
            }else if(this.RadioButtonMoveSection.isSelected()){
                enableComponents(this.PanelSection,true);
                enableComponents(this.PanelStep,false);
            }else if(this.RadioButtonNoMove.isSelected()){
                enableComponents(this.PanelSection,false);
                enableComponents(this.PanelStep,false);
            }
        }               
    }
    
    /**
     * This method is used to review if the quantity is not empty
     * 
     * @param quantity
     * @return 
     */
    public double quantityIsNotEmpty(double quantity){
        try{
            quantity = Double.parseDouble(this.TextFieldQuantity.getText());
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Tienes que ingresar una cantidad");
        }
        return quantity;
    }
    
    /**
     * This method is used to set enable
     * the components of the containner
     * 
     * @param container
     * @param enable
     */
    public void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container)component, enable);
            }
        }
    }
    
    /**
     * This method is used
     * insert to the group of cards.
     * @param cardInsert
     * 
     */    
    private void addCardGroup(Card cardInsert){
        Card[] groupCards2 = this.groupCards;
        this.groupCards = new Card[groupCards2.length+1];
        for (int i = 0; i < groupCards2.length; i++) {
            this.groupCards[i] = groupCards2[i];            
        }
        this.groupCards[groupCards2.length] = cardInsert;
    }
    
    /**
     * This method is used to create the card
     * and insert to the group of cards.
     * 
     */
    public void addCard(){
        String option = (String)this.ComboBoxTypeCard.getSelectedItem();
        int numberCopies = (int)(this.SpinnerNumberOfCopies.getValue());
        if (this.TextFieldName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Tienes que ingresar un Nombre a la tarjeta");
        }else if(this.TextAreaDescription.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Tienes que ingresar una Descripcion a la tarjeta");            
        }else if(numberCopies < 1){
            JOptionPane.showMessageDialog(null, "Tienes que ingresar un Numero de Copias correcto");
        }else{
            for (int i = 0; i < numberCopies; i++) {
                Card newCard = null;
                String cardName = this.TextFieldName.getText();
                String cardDescription = this.TextAreaDescription.getText();                
                if (option.equalsIgnoreCase("Caminar")) {
                    int steps = (int)(this.SpinnerWalk.getValue());
                    if (steps > 0){
                        newCard = new CardWalk(cardDescription, cardName, numberCopies, steps);
                    }else{
                        JOptionPane.showMessageDialog(null, "Tienes que ingresar un Numero de Pasos");
                    }
                }else if (option.equalsIgnoreCase("Multa") ) {
                    double quantity = -1;
                    quantity = quantityIsNotEmpty(quantity);
                    if (quantity >= 0) {
                        newCard = new CardPenalty(cardDescription, cardName, numberCopies,quantity);
                    }else{
                        JOptionPane.showMessageDialog(null, "Tienes que ingresar un Numero de Cantidad Correcto (Mayor a 0)");
                    }
                }else if (option.equalsIgnoreCase("Premio")) {
                    double quantity = -1;
                    quantity = quantityIsNotEmpty(quantity);
                    if (quantity >= 0) {
                        newCard = new CardPrize(cardDescription, cardName, numberCopies,quantity);
                    }else{
                        JOptionPane.showMessageDialog(null, "Tienes que ingresar un Numero de Cantidad Correcto (Mayor a 0)");
                    }
                }else if (option.equalsIgnoreCase("Pago a Jugadores")) {
                    double quantity = -1;
                    try{
                        quantity = Double.parseDouble(this.TextFieldPayToPlayers.getText());
                    }catch (NumberFormatException e){
                        JOptionPane.showMessageDialog(null, "Tienes que ingresar una cantidad");
                    }
                    if (quantity >= 0) {
                        newCard = new CardPayToPlayers(cardDescription, cardName, numberCopies,quantity);
                    }else{
                        JOptionPane.showMessageDialog(null, "Tienes que ingresar un Numero de Cantidad Correcto (Mayor a 0)");
                    }
                }else if (option.equalsIgnoreCase("Mover a Casilla")) {
                    String optionSection = (String)this.ComboBoxSectionChange.getSelectedItem();
                    Section[][] sectionsCreate = this.board.getSectionsBoard();
                    if (optionSection.isEmpty()) {
                        newCard = null;
                    }else{                
                        optionSection = optionSection.replaceAll("Casilla en: ", "");                
                        String[] coordinates = optionSection.split(",", 2);
                        newCard = new CardMoveToSection(cardDescription,cardName,numberCopies,sectionsCreate[Integer.parseInt(coordinates[0])][Integer.parseInt(coordinates[1])]);                        
                    }                    
                }else if (option.equalsIgnoreCase("Perder Turno")) {
                    int steps = (int)(this.SpinnerLostTurn.getValue());
                    if (steps > 0){
                        newCard = new CardLostTurn(cardDescription, cardName, numberCopies,steps);
                    }else{
                        JOptionPane.showMessageDialog(null, "Tienes que ingresar un Numero de Pasos");
                    }
                }else if (option.equalsIgnoreCase("Personalizada")) {
                    newCard = createCardPersonalized(newCard,cardName, cardDescription, numberCopies);                    
                }else if(option.equalsIgnoreCase("Vaya a la Carcel")){
                    newCard = new CardGoJail(cardDescription, cardName, numberCopies);
                }else if(option.equalsIgnoreCase("Salga de la Carcel")){
                    newCard = new CardOutJail(cardDescription, cardName, numberCopies);                    
                }
                if (newCard != null) {
                    if (this.indexCardEdit == -1) {
                        addCardGroup(newCard);
                    }else{
                        this.groupCards[this.indexCardEdit] = newCard;
                    }                    
                }
            }
        }
    }
    
    /**
     * This method is used to show all the cards
     * of the group in the list.
     * 
     */
    private void showCardsInGroup(){
        this.ListCards.removeAll();        
        DefaultListModel model = new DefaultListModel();
        for (int i = 0; i < groupCards.length; i++) {
            model.addElement(this.groupCards[i].getName());
        }
        this.ListCards.setModel(model);
    }
    
    /**
     * This method is used to show the sections created
     * in a combobox.
     * 
     */
    public void showSectionChange(){
        for(int i = 0; i<this.board.getQuantityRows(); i++){
            for (int j = 0; j < this.board.getQuantityColumns(); j++) {
                try{
                    Section sectiontemp = this.board.getSectionsBoard()[i][j];
                    this.ComboBoxSectionChange.addItem("Casilla en: "+sectiontemp.getRowposition()+"," +sectiontemp.getColumnPosition());
                }catch(NullPointerException e ){
                    
                }
            }                
        }
    }
    
    /**
     * This method is used to create a Personalized
     * Card
     * 
     * @param newCard
     * @param nameCard
     * @param descriptionCard
     * @param numberCopies
     * @return 
     */
    public Card createCardPersonalized(Card newCard,String nameCard, String descriptionCard, int numberCopies){
        double quantityWin = 0;
        boolean goJail = false;
        int turnsLost = 0;
        double payToPlayers = 0;
        double quantityPay = 0;
        Section sectionToMove = null;
        int stepsToMove = 0;
        if (this.CheckBoxGoJail.isSelected() == true) {
            goJail = true;
        }
        if (this.CheckBoxLostTurn.isSelected() == true) {
            turnsLost = (int)this.SpinnerLostTurn.getValue();
        }
        if (this.CheckBoxPaytoPlayers.isSelected() == true) {
            payToPlayers = Integer.parseInt(this.TextFieldPayToPlayers.getText());
        }
        if (this.RadioButtonPrize.isSelected() == true) {
            quantityWin = Integer.parseInt(this.TextFieldQuantity.getText());
        }
        if (this.RadioButtonPenalty.isSelected() == true) {
            quantityPay = Integer.parseInt(this.TextFieldQuantity.getText());
        }
        if (this.RadioButtonWalk.isSelected() == true) {
            stepsToMove = (int)this.SpinnerWalk.getValue();
        }
        if (this.RadioButtonMoveSection.isSelected() == true) {
            String optionSection = (String)this.ComboBoxSectionChange.getSelectedItem();
            Section[][] sectionsCreate = this.board.getSectionsBoard();
            optionSection = optionSection.replaceAll("Casilla en: ", "");                
            String[] coordinates = optionSection.split(",", 2);            
            sectionToMove = sectionsCreate[Integer.parseInt(coordinates[0])][Integer.parseInt(coordinates[1])];
        }        
        newCard = new CardPersonalized(quantityWin,goJail,turnsLost,payToPlayers,quantityPay,sectionToMove,stepsToMove,descriptionCard, nameCard,numberCopies);        
        return newCard;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonCreateGroup;
    private javax.swing.JButton ButtonEdit;
    private javax.swing.JButton ButtonShowCard;
    private javax.swing.JCheckBox CheckBoxGoJail;
    private javax.swing.JCheckBox CheckBoxLostTurn;
    private javax.swing.JCheckBox CheckBoxPaytoPlayers;
    private javax.swing.JComboBox<String> ComboBoxGroups;
    private javax.swing.JComboBox<String> ComboBoxSectionChange;
    private javax.swing.JComboBox<String> ComboBoxTypeCard;
    private javax.swing.JList<String> ListCards;
    private javax.swing.JPanel PanelMove;
    private javax.swing.JPanel PanelPay;
    private javax.swing.JPanel PanelPayToPlayers;
    private javax.swing.JPanel PanelPersonalized;
    private javax.swing.JPanel PanelQuantity;
    private javax.swing.JPanel PanelSection;
    private javax.swing.JPanel PanelStep;
    private javax.swing.JPanel PanelTurns;
    private javax.swing.JRadioButton RadioButtonMoveSection;
    private javax.swing.JRadioButton RadioButtonNoMove;
    private javax.swing.JRadioButton RadioButtonNoQuantity;
    private javax.swing.JRadioButton RadioButtonPenalty;
    private javax.swing.JRadioButton RadioButtonPrize;
    private javax.swing.JRadioButton RadioButtonWalk;
    private javax.swing.JSpinner SpinnerLostTurn;
    private javax.swing.JSpinner SpinnerNumberOfCopies;
    private javax.swing.JSpinner SpinnerWalk;
    private javax.swing.JTextArea TextAreaDescription;
    private javax.swing.JTextField TextFieldName;
    private javax.swing.JTextField TextFieldPayToPlayers;
    private javax.swing.JTextField TextFieldQuantity;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

    private Card CardPersonalized() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
